package dfsnfs;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

// BFS 탐색
public class p1697 {
	static int[] map;
	static int k;
	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		// n과 k값 받기
		int n = sc.nextInt();
		if(n < 0 || n > 100000) {
			System.exit(0);
		}
		k = sc.nextInt();
		if(k < 0 || k > 100000) {
			System.exit(0);
		}
		
		// map 배열 크기 설정
		if(n >= k) {
			map = new int[n + 1];	// n이 100000이 될 수 있으므로 +1을 해서 최대 크기를 늘려야 한다.
		}
		if(n < k) {
			map = new int[2 * k];
		}
		// map[k] = -1;	// map에서 k위치만 -1로 설정
		
		// BFS 시작
		int moveCount = findBrotherOrSister(n);
	}
	
	// BFS 사용.
	private static int findBrotherOrSister(int x) {
		if(x == k) {	// 시작 지점에 동생이 있는 경우
			return 0;
		}
		
		Queue<Integer> queue = new LinkedList<Integer>();
		queue.add(x);
		
		while(!queue.isEmpty()) {
			int currentX = queue.poll();
			if(currentX == k && map[k] == 0) {
				
			}
			if(map[currentX] > 0)
		}
		
		return x;
	}
}
