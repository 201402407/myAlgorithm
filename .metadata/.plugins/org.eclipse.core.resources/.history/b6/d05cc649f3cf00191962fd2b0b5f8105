package dfsnfs;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class p2178 {
	static int[][] map;
	static final int directionCount = 4;
	
	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = sc.nextInt();
		if(n < 2 || m > 100) {
			System.out.println("n, m의 범위를 넘어선 값을 입력했습니다.");
			System.exit(0);	
		}
		
		map = new int[n][m];
		sc.nextLine();	// 엔터 입력 방지
		
		// 맵 입력받기
		for(int i = 0; i < n; i++) {	// n = y
			String strLine = sc.nextLine();
			if(strLine.length() > m) {
				System.out.println("m의 범위를 넘어서서 값을 입력했습니다.");
				System.exit(0);	
			}
			for(int j = 0; j < strLine.length(); j++) {	// m = x
				char maze = strLine.charAt(j);
				if(maze == 48 || maze == 49) {	// 0 또는 1
					map[i][j] = Character.getNumericValue(strLine.charAt(j));	// 아스키코드가 아닌 char 숫자를 int로 변경
				}
				else {
					System.out.println("0 또는 1을 입력하지 않았습니다. 종료합니다.");
					System.exit(0);
				}
			}
		}
	}
	
	// 최단 경로 탐색
	public static int explore(int y, int x, int prevDirection) {
		ArrayList<Integer> moveCountList = new ArrayList<>();
		ArrayList<Integer> directionList = checkMoveDirection(y, x, prevDirection);
		if(directionList.isEmpty()) {
			if(y == map.length - 1 && x == map[0].length - 1) {	// (y, x) == (N, M)인 경우
				return 1;
			}
			else {
				return 0;
			}
		}
		return;
	}
	
	// 방향에 따라 변한 좌표 값 리턴
	// @param : (int)direction -> 1 : left, 2 : right, 3 : up, 4 : down
	public static int[] getMovePosition(int y, int x, int direction) {
		int[] movePos = {y, x};
		switch(direction) {
		case 1:	// left
			movePos[1]--;
			break;
		case 2:	// right
			movePos[1]++;
			break;
		case 3:	// up
			movePos[0]--;
			break;
		case 4:	// down
			movePos[0]++;
			break;
			default:
				break;
		}
		return movePos;
	}
	
	// 지나온 방향을 제외하고, 움직일 수 있는 방향이 있는지 체크해서 direction 값을 ArrayList에 넣고 ArrayList 리턴
	// 없으면 빈 ArrayList 리턴 -> 길이 값으로 판단.
	public static ArrayList<Integer> checkMoveDirection(int y, int x, int prevDirection) {
		ArrayList<Integer> directionList = new ArrayList<>();
		for(int i = 1; i <= directionCount; i++) {
			if(i == prevDirection)
				continue;
			int[] movePos = getMovePosition(y, x, i);
			if(movePos[0] < 0 || movePos[0] >= map.length) {	// x(n) 범위 체크
				continue;
			}
			if(movePos[1] < 0 || movePos[1] >= map[0].length) {	// y(m) 범위 체크
				continue;
			}
			if(map[movePos[0]][movePos[1]] == 1) {
				directionList.add(i);
			}
		}
		return directionList;
	}
}
