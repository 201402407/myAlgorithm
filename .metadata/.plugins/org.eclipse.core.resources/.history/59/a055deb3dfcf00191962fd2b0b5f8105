package dfsnfs;
import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class p2667 {
	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		int mapSize = sc.nextInt();
		int[][] map = new int[mapSize][mapSize];
		ArrayList<Integer> apartmentCount = new ArrayList<>();
		
		// 맵 입력받기
		for(int i = 0; i < mapSize; i++) {
			for(int j = 0; j < mapSize; j++) {
				map[i][j] = sc.nextInt();
			}
		}
		
		// 단지번호 붙이기 위해 1 탐색
		for(int i = 0; i < mapSize; i++) {
			for(int j = 0; j < mapSize; j++) {
				if(map[i][j] == 1) {
					apartmentCount.add(mapSearchDFS(i, j));
				}
			}
		}
		
		// 오름차순 정렬
		Collections.sort(apartmentCount);
		// 출력
		System.out.println(apartmentCount.size());
		for(int n = 0; n < apartmentCount.size(); n++)
			System.out.println(apartmentCount.get(n));
		
		
	}
	
	// Depth First Search(깊이 우선 탐색)
	// x : x위치 좌표 값.  y : y위치 좌표 값.
	public static int mapSearchDFS(int x, int y) {
		if(boolTemp[vertex]) { // 이미 탐색 완료된 노드면 종료
			return;
		}
		
		boolTemp[vertex] = true;
		System.out.print(vertex + " ");
		
		ArrayList<Integer> tempList = temp[vertex];
		for(int nextCnt = 0; nextCnt < tempList.size(); nextCnt++) {
			if(!boolTemp[tempList.get(nextCnt)]) {	// 하나부터 깊게 파고들기 위해 재귀로 더 깊게 들어간다.
				DFS(temp, boolTemp, tempList.get(nextCnt));
			}
		}
	}
}
